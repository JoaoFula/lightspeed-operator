---
defaultChannel: alpha
icon:
  base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGlkPSJ1dWlkLTQ2NzAxNDY4LTY2NDEtNDhjYi05ODdhLWFkOGFhYWE0Y2M1NyIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMzggMzgiPjxkZWZzPjxzdHlsZT4udXVpZC0wNWM4ZjUzZC0zOTZhLTRhNzctYjYxMC00Y2FlMTYwN2IzN2Z7ZmlsbDojZTAwO30udXVpZC0wNThiNjM1ZC1iNjFjLTQ2ZjQtOTgyYS1hOTFkNmEyMjYzZWJ7ZmlsbDojZmZmO30udXVpZC0wMTY4MTg4Yy1kMGE2LTQ5NmUtYTJkOC01Y2Q2ZWUzMGRjYjJ7ZmlsbDojZTBlMGUwO308L3N0eWxlPjwvZGVmcz48cGF0aCBjbGFzcz0idXVpZC0wNThiNjM1ZC1iNjFjLTQ2ZjQtOTgyYS1hOTFkNmEyMjYzZWIiIGQ9Im0yOCwxSDEwQzUuMDI5NDQsMSwxLDUuMDI5NDQsMSwxMHYxOGMwLDQuOTcwNTcsNC4wMjk0NCw5LDksOWgxOGM0Ljk3MDU2LDAsOS00LjAyOTQzLDktOVYxMGMwLTQuOTcwNTYtNC4wMjk0NC05LTktOWgwWiIvPjxwYXRoIGNsYXNzPSJ1dWlkLTAxNjgxODhjLWQwYTYtNDk2ZS1hMmQ4LTVjZDZlZTMwZGNiMiIgZD0ibTI4LDIuMjVjNC4yNzMzMiwwLDcuNzUsMy40NzY2NCw3Ljc1LDcuNzV2MThjMCw0LjI3MzM2LTMuNDc2NjgsNy43NS03Ljc1LDcuNzVIMTBjLTQuMjczMzIsMC03Ljc1LTMuNDc2NjQtNy43NS03Ljc1VjEwYzAtNC4yNzMzNiwzLjQ3NjY4LTcuNzUsNy43NS03Ljc1aDE4bTAtMS4yNUgxMEM1LjAyOTQyLDEsMSw1LjAyOTQ0LDEsMTB2MThjMCw0Ljk3MDU3LDQuMDI5NDIsOSw5LDloMThjNC45NzA1OCwwLDktNC4wMjk0Myw5LTlWMTBjMC00Ljk3MDU2LTQuMDI5NDItOS05LTloMFoiLz48cGF0aCBjbGFzcz0idXVpZC0wNWM4ZjUzZC0zOTZhLTRhNzctYjYxMC00Y2FlMTYwN2IzN2YiIGQ9Im0yMCwxNS42MjVjLS4zNDQ3MywwLS42MjUtLjI4MDI3LS42MjUtLjYyNXYtN2MwLS4zNDQ3My4yODAyNy0uNjI1LjYyNS0uNjI1cy42MjUuMjgwMjcuNjI1LjYyNXY3YzAsLjM0NDczLS4yODAyNy42MjUtLjYyNS42MjVaIi8+PHBhdGggY2xhc3M9InV1aWQtMDVjOGY1M2QtMzk2YS00YTc3LWI2MTAtNGNhZTE2MDdiMzdmIiBkPSJtMTYsMTkuNjI1aC03Yy0uMzQ0NzMsMC0uNjI1LS4yODAyNy0uNjI1LS42MjVzLjI4MDI3LS42MjUuNjI1LS42MjVoN2MuMzQ0NzMsMCwuNjI1LjI4MDI3LjYyNS42MjVzLS4yODAyNy42MjUtLjYyNS42MjVaIi8+PHBhdGggY2xhc3M9InV1aWQtMDVjOGY1M2QtMzk2YS00YTc3LWI2MTAtNGNhZTE2MDdiMzdmIiBkPSJtMjAsMzAuNjI1Yy0uMzQ0NzMsMC0uNjI1LS4yODAyNy0uNjI1LS42MjV2LTdjMC0uMzQ0NzMuMjgwMjctLjYyNS42MjUtLjYyNXMuNjI1LjI4MDI3LjYyNS42MjV2N2MwLC4zNDQ3My0uMjgwMjcuNjI1LS42MjUuNjI1WiIvPjxwYXRoIGQ9Im0zMC41NzY1NCwxOS4yMzk0NGMuMDI3OTUtLjA2NzY5LjAzOTU1LS4xMzk0Ny4wNDI4NS0uMjExNDkuMDAwNDktLjAwOTgzLjAwNTYyLS4wMTgwNy4wMDU2Mi0uMDI3OTVzLS4wMDUxMy0uMDE4MTMtLjAwNTYyLS4wMjc5NWMtLjAwMzMtLjA3MjAyLS4wMTQ4OS0uMTQzOC0uMDQyODUtLjIxMTQ5LS4wMjAwMi0uMDQ3OTEtLjA1MzgzLS4wODY2Ny0uMDg0NDctLjEyNzc1LS4wMTgwNy0uMDI0NDgtLjAyNzU5LS4wNTMwNC0uMDQ5NjgtLjA3NTJsLTItMmMtLjI0NDE0LS4yNDQxNC0uNjQwNjItLjI0NDE0LS44ODQ3NywwLS4yNDMxNi4yNDQxNC0uMjQzMTYuNjQwNjIsMCwuODg0NzdsLjkzMzIzLjkzMjYyaC05LjQ5MDg0Yy0uMzQ0NzMsMC0uNjI1LjI4MDI3LS42MjUuNjI1cy4yODAyNy42MjUuNjI1LjYyNWg5LjQ5MDg0bC0uOTMzMjMuOTMyNjJjLS4yNDMxNi4yNDQxNC0uMjQzMTYuNjQwNjIsMCwuODg0NzcuMTIyMDcuMTIyMDcuMjgyMjMuMTgyNjIuNDQyMzguMTgyNjJzLjMyMDMxLS4wNjA1NS40NDIzOC0uMTgyNjJsMi0yYy4wMjIwOS0uMDIyMTYuMDMxNjItLjA1MDcyLjA0OTY4LS4wNzUyLjAzMDY0LS4wNDEwOC4wNjQ0NS0uMDc5ODMuMDg0NDctLjEyNzc1WiIvPjxwYXRoIGQ9Im0xNywxNi42MjVjLS4xNjAxNiwwLS4zMjAzMS0uMDYwNTUtLjQ0MjM4LS4xODI2MmwtNC00Yy0uMjQzMTYtLjI0NDE0LS4yNDMxNi0uNjQwNjIsMC0uODg0NzcuMjQ0MTQtLjI0NDE0LjY0MDYyLS4yNDQxNC44ODQ3NywwbDQsNGMuMjQzMTYuMjQ0MTQuMjQzMTYuNjQwNjIsMCwuODg0NzctLjEyMjA3LjEyMjA3LS4yODIyMy4xODI2Mi0uNDQyMzguMTgyNjJaIi8+PHBhdGggZD0ibTEzLDI2LjYyNWMtLjE2MDE2LDAtLjMyMDMxLS4wNjA1NS0uNDQyMzgtLjE4MjYyLS4yNDMxNi0uMjQ0MTQtLjI0MzE2LS42NDA2MiwwLS44ODQ3N2w0LTRjLjI0NDE0LS4yNDQxNC42NDA2Mi0uMjQ0MTQuODg0NzcsMCwuMjQzMTYuMjQ0MTQuMjQzMTYuNjQwNjIsMCwuODg0NzdsLTQsNGMtLjEyMjA3LjEyMjA3LS4yODIyMy4xODI2Mi0uNDQyMzguMTgyNjJaIi8+PHBhdGggY2xhc3M9InV1aWQtMDVjOGY1M2QtMzk2YS00YTc3LWI2MTAtNGNhZTE2MDdiMzdmIiBkPSJtMTcuNDIzODMsMTMuNjI1Yy0uMjg4MDksMC0uNTQ3ODUtLjIwMTE3LS42MTAzNS0uNDk1MTJsLS40MjQ4LTJjLS4wNzEyOS0uMzM3ODkuMTQzNTUtLjY2OTkyLjQ4MTQ1LS43NDEyMS4zMzg4Ny0uMDc1Mi42Njk5Mi4xNDM1NS43NDEyMS40ODE0NWwuNDI0OCwyYy4wNzEyOS4zMzc4OS0uMTQzNTUuNjY5OTItLjQ4MTQ1Ljc0MTIxLS4wNDM5NS4wMDk3Ny0uMDg3ODkuMDEzNjctLjEzMDg2LjAxMzY3WiIvPjxwYXRoIGNsYXNzPSJ1dWlkLTA1YzhmNTNkLTM5NmEtNGE3Ny1iNjEwLTRjYWUxNjA3YjM3ZiIgZD0ibTE0LjAwMDk4LDE3LjA0OThjLS4wNDI5NywwLS4wODY5MS0uMDAzOTEtLjEzMDg2LS4wMTM2N2wtMi0uNDI0OGMtLjMzNzg5LS4wNzEyOS0uNTUyNzMtLjQwMzMyLS40ODE0NS0uNzQxMjEuMDcyMjctLjMzNzg5LjQwMjM0LS41NTg1OS43NDEyMS0uNDgxNDVsMiwuNDI0OGMuMzM3ODkuMDcxMjkuNTUyNzMuNDAzMzIuNDgxNDUuNzQxMjEtLjA2MjUuMjkzOTUtLjMyMjI3LjQ5NTEyLS42MTAzNS40OTUxMloiLz48cGF0aCBjbGFzcz0idXVpZC0wNWM4ZjUzZC0zOTZhLTRhNzctYjYxMC00Y2FlMTYwN2IzN2YiIGQ9Im0xNy4wMDA5OCwyNy42MjVjLS4wNDI5NywwLS4wODY5MS0uMDAzOTEtLjEzMDg2LS4wMTM2Ny0uMzM3ODktLjA3MTI5LS41NTI3My0uNDAzMzItLjQ4MTQ1LS43NDEyMWwuNDI0OC0yYy4wNzIyNy0uMzM3ODkuNDAxMzctLjU1NTY2Ljc0MTIxLS40ODE0NS4zMzc4OS4wNzEyOS41NTI3My40MDMzMi40ODE0NS43NDEyMWwtLjQyNDgsMmMtLjA2MjUuMjkzOTUtLjMyMjI3LjQ5NTEyLS42MTAzNS40OTUxMloiLz48cGF0aCBjbGFzcz0idXVpZC0wNWM4ZjUzZC0zOTZhLTRhNzctYjYxMC00Y2FlMTYwN2IzN2YiIGQ9Im0xMS45OTkwMiwyMi42MjVjLS4yODgwOSwwLS41NDc4NS0uMjAxMTctLjYxMDM1LS40OTUxMi0uMDcxMjktLjMzNzg5LjE0MzU1LS42Njk5Mi40ODE0NS0uNzQxMjFsMi0uNDI0OGMuMzQwODItLjA3NjE3LjY2OTkyLjE0MzU1Ljc0MTIxLjQ4MTQ1cy0uMTQzNTUuNjY5OTItLjQ4MTQ1Ljc0MTIxbC0yLC40MjQ4Yy0uMDQzOTUuMDA5NzctLjA4Nzg5LjAxMzY3LS4xMzA4Ni4wMTM2N1oiLz48cGF0aCBkPSJtOSwxNS42Mjk4OGMtLjE2MDE2LDAtLjMyMDMxLS4wNzAzMS0uNDQwNDMtLjE5MDQzLS4wNTk1Ny0uMDU5NTctLjA5OTYxLS4xMjAxMi0uMTM5NjUtLjE5OTIyLS4wMzAyNy0uMDgwMDgtLjA0OTgtLjE2MDE2LS4wNDk4LS4yNDAyMywwLS4xNjAxNi4wNjkzNC0uMzIwMzEuMTg5NDUtLjQ0MDQzLjIzMDQ3LS4yMjk0OS42NTAzOS0uMjQwMjMuODc5ODgsMCwuMTIwMTIuMTIwMTIuMTkwNDMuMjgwMjcuMTkwNDMuNDQwNDMsMCwuMDgwMDgtLjAyMDUxLjE2MDE2LS4wNDk4LjI0MDIzLS4wMzAyNy4wNzkxLS4wODAwOC4xMzk2NS0uMTQwNjIuMTk5MjItLjEyMDEyLjEyMDEyLS4yNzkzLjE5MDQzLS40Mzk0NS4xOTA0M1oiLz48cGF0aCBkPSJtOSwyMy42Mjk4OGMtLjE2MDE2LDAtLjMyMDMxLS4wNzAzMS0uNDQwNDMtLjE5MDQzLS4xMjAxMi0uMTA5MzgtLjE4OTQ1LS4yNzkzLS4xODk0NS0uNDM5NDVzLjA2OTM0LS4zMjAzMS4xODk0NS0uNDQwNDNjLjIzMDQ3LS4yMjk0OS42NDA2Mi0uMjQwMjMuODc5ODgsMCwuMTIwMTIuMTIwMTIuMTkwNDMuMjgwMjcuMTkwNDMuNDQwNDNzLS4wNzAzMS4zMzAwOC0uMTkwNDMuNDM5NDVjLS4xMjAxMi4xMjAxMi0uMjc5My4xOTA0My0uNDM5NDUuMTkwNDNaIi8+PC9zdmc+
  mediatype: image/svg+xml
name: lightspeed-operator
schema: olm.package
---
image: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-operator-bundle@sha256:c1845c2ba81f89feb216ac01cab58743525a95e1693bfafc0552a9eca916e956
name: lightspeed-operator.v0.3.3
package: lightspeed-operator
properties:
  - type: olm.gvk
    value:
      group: ols.openshift.io
      kind: OLSConfig
      version: v1alpha1
  - type: olm.package
    value:
      packageName: lightspeed-operator
      version: 0.3.3
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjUifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJvbHNjb25maWdzLm9scy5vcGVuc2hpZnQuaW8ifSwic3BlYyI6eyJncm91cCI6Im9scy5vcGVuc2hpZnQuaW8iLCJuYW1lcyI6eyJraW5kIjoiT0xTQ29uZmlnIiwibGlzdEtpbmQiOiJPTFNDb25maWdMaXN0IiwicGx1cmFsIjoib2xzY29uZmlncyIsInNpbmd1bGFyIjoib2xzY29uZmlnIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFhbHBoYTEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiUmVkIEhhdCBPcGVuU2hpZnQgTGlnaHRzcGVlZCBpbnN0YW5jZS4gT0xTQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBvbHNjb25maWdzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC5cblNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZFxubWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLlxuU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uXG5DYW5ub3QgYmUgdXBkYXRlZC5cbkluIENhbWVsQ2FzZS5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ik9MU0NvbmZpZ1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBPTFNDb25maWciLCJwcm9wZXJ0aWVzIjp7ImxsbSI6eyJkZXNjcmlwdGlvbiI6IkxMTVNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiB0aGUgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgKExMTSkuIiwicHJvcGVydGllcyI6eyJwcm92aWRlcnMiOnsiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJQcm92aWRlclNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBMTE0gcHJvdmlkZXIuIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJIFZlcnNpb24gZm9yIEF6dXJlIE9wZW5BSSBwcm92aWRlciIsInR5cGUiOiJzdHJpbmcifSwiY3JlZGVudGlhbHNTZWNyZXRSZWYiOnsiZGVzY3JpcHRpb24iOiJUaGUgbmFtZSBvZiB0aGUgc2VjcmV0IG9iamVjdCB0aGF0IHN0b3JlcyBBUEkgcHJvdmlkZXIgY3JlZGVudGlhbHMiLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVmYXVsdCI6IiIsImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuXG5UaGlzIGZpZWxkIGlzIGVmZmVjdGl2ZWx5IHJlcXVpcmVkLCBidXQgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGlzXG5hbGxvd2VkIHRvIGJlIGVtcHR5LiBJbnN0YW5jZXMgb2YgdGhpcyB0eXBlIHdpdGggYW4gZW1wdHkgdmFsdWUgaGVyZSBhcmVcbmFsbW9zdCBjZXJ0YWlubHkgd3JvbmcuXG5Nb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL292ZXJ2aWV3L3dvcmtpbmctd2l0aC1vYmplY3RzL25hbWVzLyNuYW1lcyIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtbWFwLXR5cGUiOiJhdG9taWMifSwiZGVwbG95bWVudE5hbWUiOnsiZGVzY3JpcHRpb24iOiJBenVyZSBPcGVuQUkgZGVwbG95bWVudCBuYW1lIiwidHlwZSI6InN0cmluZyJ9LCJtb2RlbHMiOnsiZGVzY3JpcHRpb24iOiJMaXN0IG9mIG1vZGVscyBmcm9tIHRoZSBwcm92aWRlciIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiTW9kZWxTcGVjIGRlZmluZXMgdGhlIExMTSBtb2RlbCB0byB1c2UgYW5kIGl0cyBwYXJhbWV0ZXJzLiIsInByb3BlcnRpZXMiOnsiY29udGV4dFdpbmRvd1NpemUiOnsiZGVzY3JpcHRpb24iOiJEZWZpbmVzIHRoZSBtb2RlbCdzIGNvbnRleHQgd2luZG93IHNpemUuIERlZmF1bHQgaXMgc3BlY2lmaWMgdG8gcHJvdmlkZXIvbW9kZWwuIiwibWluaW11bSI6MTAyNCwidHlwZSI6ImludGVnZXIifSwibmFtZSI6eyJkZXNjcmlwdGlvbiI6Ik1vZGVsIG5hbWUiLCJ0eXBlIjoic3RyaW5nIn0sInBhcmFtZXRlcnMiOnsiZGVzY3JpcHRpb24iOiJNb2RlbCBBUEkgcGFyYW1ldGVycyIsInByb3BlcnRpZXMiOnsibWF4VG9rZW5zRm9yUmVzcG9uc2UiOnsiZGVzY3JpcHRpb24iOiJNYXggdG9rZW5zIGZvciByZXNwb25zZSIsInR5cGUiOiJpbnRlZ2VyIn19LCJ0eXBlIjoib2JqZWN0In0sInVybCI6eyJkZXNjcmlwdGlvbiI6Ik1vZGVsIEFQSSBVUkwiLCJwYXR0ZXJuIjoiXmh0dHBzPzovLy4qJCIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbIm5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwibmFtZSI6eyJkZXNjcmlwdGlvbiI6IlByb3ZpZGVyIG5hbWUiLCJ0eXBlIjoic3RyaW5nIn0sInByb2plY3RJRCI6eyJkZXNjcmlwdGlvbiI6IldhdHNvbnggUHJvamVjdCBJRCIsInR5cGUiOiJzdHJpbmcifSwidGxzU2VjdXJpdHlQcm9maWxlIjp7ImRlc2NyaXB0aW9uIjoiVExTIFNlY3VyaXR5IFByb2ZpbGUgdXNlZCBieSBjb25uZWN0aW9uIHRvIHByb3ZpZGVyIiwicHJvcGVydGllcyI6eyJjdXN0b20iOnsiZGVzY3JpcHRpb24iOiJjdXN0b20gaXMgYSB1c2VyLWRlZmluZWQgVExTIHNlY3VyaXR5IHByb2ZpbGUuIEJlIGV4dHJlbWVseSBjYXJlZnVsIHVzaW5nIGEgY3VzdG9tXG5wcm9maWxlIGFzIGludmFsaWQgY29uZmlndXJhdGlvbnMgY2FuIGJlIGNhdGFzdHJvcGhpYy4gQW4gZXhhbXBsZSBjdXN0b20gcHJvZmlsZVxubG9va3MgbGlrZSB0aGlzOlxuXG4gIGNpcGhlcnM6XG5cbiAgICAtIEVDREhFLUVDRFNBLUNIQUNIQTIwLVBPTFkxMzA1XG5cbiAgICAtIEVDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBFQ0RIRS1SU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICBtaW5UTFNWZXJzaW9uOiBWZXJzaW9uVExTMTEiLCJudWxsYWJsZSI6dHJ1ZSwicHJvcGVydGllcyI6eyJjaXBoZXJzIjp7ImRlc2NyaXB0aW9uIjoiY2lwaGVycyBpcyB1c2VkIHRvIHNwZWNpZnkgdGhlIGNpcGhlciBhbGdvcml0aG1zIHRoYXQgYXJlIG5lZ290aWF0ZWRcbmR1cmluZyB0aGUgVExTIGhhbmRzaGFrZS4gIE9wZXJhdG9ycyBtYXkgcmVtb3ZlIGVudHJpZXMgdGhlaXIgb3BlcmFuZHNcbmRvIG5vdCBzdXBwb3J0LiAgRm9yIGV4YW1wbGUsIHRvIHVzZSBERVMtQ0JDMy1TSEEgICh5YW1sKTpcblxuICBjaXBoZXJzOlxuICAgIC0gREVTLUNCQzMtU0hBIiwiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibWluVExTVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6Im1pblRMU1ZlcnNpb24gaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBtaW5pbWFsIHZlcnNpb24gb2YgdGhlIFRMUyBwcm90b2NvbFxudGhhdCBpcyBuZWdvdGlhdGVkIGR1cmluZyB0aGUgVExTIGhhbmRzaGFrZS4gRm9yIGV4YW1wbGUsIHRvIHVzZSBUTFNcbnZlcnNpb25zIDEuMSwgMS4yIGFuZCAxLjMgKHlhbWwpOlxuXG4gIG1pblRMU1ZlcnNpb246IFZlcnNpb25UTFMxMVxuXG5OT1RFOiBjdXJyZW50bHkgdGhlIGhpZ2hlc3QgbWluVExTVmVyc2lvbiBhbGxvd2VkIGlzIFZlcnNpb25UTFMxMiIsImVudW0iOlsiVmVyc2lvblRMUzEwIiwiVmVyc2lvblRMUzExIiwiVmVyc2lvblRMUzEyIiwiVmVyc2lvblRMUzEzIl0sInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwiaW50ZXJtZWRpYXRlIjp7ImRlc2NyaXB0aW9uIjoiaW50ZXJtZWRpYXRlIGlzIGEgVExTIHNlY3VyaXR5IHByb2ZpbGUgYmFzZWQgb246XG5cbmh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9TZWN1cml0eS9TZXJ2ZXJfU2lkZV9UTFMjSW50ZXJtZWRpYXRlX2NvbXBhdGliaWxpdHlfLjI4cmVjb21tZW5kZWQuMjlcblxuYW5kIGxvb2tzIGxpa2UgdGhpcyAoeWFtbCk6XG5cbiAgY2lwaGVyczpcblxuICAgIC0gVExTX0FFU18xMjhfR0NNX1NIQTI1NlxuXG4gICAgLSBUTFNfQUVTXzI1Nl9HQ01fU0hBMzg0XG5cbiAgICAtIFRMU19DSEFDSEEyMF9QT0xZMTMwNV9TSEEyNTZcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gRUNESEUtUlNBLUFFUzEyOC1HQ00tU0hBMjU2XG5cbiAgICAtIEVDREhFLUVDRFNBLUFFUzI1Ni1HQ00tU0hBMzg0XG5cbiAgICAtIEVDREhFLVJTQS1BRVMyNTYtR0NNLVNIQTM4NFxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBFQ0RIRS1SU0EtQ0hBQ0hBMjAtUE9MWTEzMDVcblxuICAgIC0gREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NlxuXG4gICAgLSBESEUtUlNBLUFFUzI1Ni1HQ00tU0hBMzg0XG5cbiAgbWluVExTVmVyc2lvbjogVmVyc2lvblRMUzEyIiwibnVsbGFibGUiOnRydWUsInR5cGUiOiJvYmplY3QifSwibW9kZXJuIjp7ImRlc2NyaXB0aW9uIjoibW9kZXJuIGlzIGEgVExTIHNlY3VyaXR5IHByb2ZpbGUgYmFzZWQgb246XG5cbmh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9TZWN1cml0eS9TZXJ2ZXJfU2lkZV9UTFMjTW9kZXJuX2NvbXBhdGliaWxpdHlcblxuYW5kIGxvb2tzIGxpa2UgdGhpcyAoeWFtbCk6XG5cbiAgY2lwaGVyczpcblxuICAgIC0gVExTX0FFU18xMjhfR0NNX1NIQTI1NlxuXG4gICAgLSBUTFNfQUVTXzI1Nl9HQ01fU0hBMzg0XG5cbiAgICAtIFRMU19DSEFDSEEyMF9QT0xZMTMwNV9TSEEyNTZcblxuICBtaW5UTFNWZXJzaW9uOiBWZXJzaW9uVExTMTMiLCJudWxsYWJsZSI6dHJ1ZSwidHlwZSI6Im9iamVjdCJ9LCJvbGQiOnsiZGVzY3JpcHRpb24iOiJvbGQgaXMgYSBUTFMgc2VjdXJpdHkgcHJvZmlsZSBiYXNlZCBvbjpcblxuaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L1NlcnZlcl9TaWRlX1RMUyNPbGRfYmFja3dhcmRfY29tcGF0aWJpbGl0eVxuXG5hbmQgbG9va3MgbGlrZSB0aGlzICh5YW1sKTpcblxuICBjaXBoZXJzOlxuXG4gICAgLSBUTFNfQUVTXzEyOF9HQ01fU0hBMjU2XG5cbiAgICAtIFRMU19BRVNfMjU2X0dDTV9TSEEzODRcblxuICAgIC0gVExTX0NIQUNIQTIwX1BPTFkxMzA1X1NIQTI1NlxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1BRVMxMjgtR0NNLVNIQTI1NlxuXG4gICAgLSBFQ0RIRS1SU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMjU2LUdDTS1TSEEzODRcblxuICAgIC0gRUNESEUtUlNBLUFFUzI1Ni1HQ00tU0hBMzg0XG5cbiAgICAtIEVDREhFLUVDRFNBLUNIQUNIQTIwLVBPTFkxMzA1XG5cbiAgICAtIEVDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBESEUtUlNBLUFFUzEyOC1HQ00tU0hBMjU2XG5cbiAgICAtIERIRS1SU0EtQUVTMjU2LUdDTS1TSEEzODRcblxuICAgIC0gREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1BRVMxMjgtU0hBMjU2XG5cbiAgICAtIEVDREhFLVJTQS1BRVMxMjgtU0hBMjU2XG5cbiAgICAtIEVDREhFLUVDRFNBLUFFUzEyOC1TSEFcblxuICAgIC0gRUNESEUtUlNBLUFFUzEyOC1TSEFcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMjU2LVNIQTM4NFxuXG4gICAgLSBFQ0RIRS1SU0EtQUVTMjU2LVNIQTM4NFxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1BRVMyNTYtU0hBXG5cbiAgICAtIEVDREhFLVJTQS1BRVMyNTYtU0hBXG5cbiAgICAtIERIRS1SU0EtQUVTMTI4LVNIQTI1NlxuXG4gICAgLSBESEUtUlNBLUFFUzI1Ni1TSEEyNTZcblxuICAgIC0gQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gQUVTMjU2LUdDTS1TSEEzODRcblxuICAgIC0gQUVTMTI4LVNIQTI1NlxuXG4gICAgLSBBRVMyNTYtU0hBMjU2XG5cbiAgICAtIEFFUzEyOC1TSEFcblxuICAgIC0gQUVTMjU2LVNIQVxuXG4gICAgLSBERVMtQ0JDMy1TSEFcblxuICBtaW5UTFNWZXJzaW9uOiBWZXJzaW9uVExTMTAiLCJudWxsYWJsZSI6dHJ1ZSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoidHlwZSBpcyBvbmUgb2YgT2xkLCBJbnRlcm1lZGlhdGUsIE1vZGVybiBvciBDdXN0b20uIEN1c3RvbSBwcm92aWRlc1xudGhlIGFiaWxpdHkgdG8gc3BlY2lmeSBpbmRpdmlkdWFsIFRMUyBzZWN1cml0eSBwcm9maWxlIHBhcmFtZXRlcnMuXG5PbGQsIEludGVybWVkaWF0ZSBhbmQgTW9kZXJuIGFyZSBUTFMgc2VjdXJpdHkgcHJvZmlsZXMgYmFzZWQgb246XG5cbmh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9TZWN1cml0eS9TZXJ2ZXJfU2lkZV9UTFMjUmVjb21tZW5kZWRfY29uZmlndXJhdGlvbnNcblxuVGhlIHByb2ZpbGVzIGFyZSBpbnRlbnQgYmFzZWQsIHNvIHRoZXkgbWF5IGNoYW5nZSBvdmVyIHRpbWUgYXMgbmV3IGNpcGhlcnMgYXJlIGRldmVsb3BlZCBhbmQgZXhpc3RpbmcgY2lwaGVyc1xuYXJlIGZvdW5kIHRvIGJlIGluc2VjdXJlLiAgRGVwZW5kaW5nIG9uIHByZWNpc2VseSB3aGljaCBjaXBoZXJzIGFyZSBhdmFpbGFibGUgdG8gYSBwcm9jZXNzLCB0aGUgbGlzdCBtYXkgYmVcbnJlZHVjZWQuXG5cbk5vdGUgdGhhdCB0aGUgTW9kZXJuIHByb2ZpbGUgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgYmVjYXVzZSBpdCBpcyBub3RcbnlldCB3ZWxsIGFkb3B0ZWQgYnkgY29tbW9uIHNvZnR3YXJlIGxpYnJhcmllcy4iLCJlbnVtIjpbIk9sZCIsIkludGVybWVkaWF0ZSIsIk1vZGVybiIsIkN1c3RvbSJdLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJQcm92aWRlciB0eXBlIiwiZW51bSI6WyJhenVyZV9vcGVuYWkiLCJiYW0iLCJvcGVuYWkiLCJ3YXRzb254IiwicmhvYWlfdmxsbSIsInJoZWxhaV92bGxtIiwiZmFrZV9wcm92aWRlciJdLCJ0eXBlIjoic3RyaW5nIn0sInVybCI6eyJkZXNjcmlwdGlvbiI6IlByb3ZpZGVyIEFQSSBVUkwiLCJwYXR0ZXJuIjoiXmh0dHBzPzovLy4qJCIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNyZWRlbnRpYWxzU2VjcmV0UmVmIiwibW9kZWxzIiwibmFtZSIsInR5cGUiXSwidHlwZSI6Im9iamVjdCIsIngta3ViZXJuZXRlcy12YWxpZGF0aW9ucyI6W3sibWVzc2FnZSI6IidkZXBsb3ltZW50TmFtZScgbXVzdCBiZSBzcGVjaWZpZWQgZm9yICdhenVyZV9vcGVuYWknIHByb3ZpZGVyIiwicnVsZSI6InNlbGYudHlwZSAhPSBcImF6dXJlX29wZW5haVwiIHx8IHNlbGYuZGVwbG95bWVudE5hbWUgIT0gXCJcIiJ9LHsibWVzc2FnZSI6Iidwcm9qZWN0SUQnIG11c3QgYmUgc3BlY2lmaWVkIGZvciAnd2F0c29ueCcgcHJvdmlkZXIiLCJydWxlIjoic2VsZi50eXBlICE9IFwid2F0c29ueFwiIHx8IHNlbGYucHJvamVjdElEICE9IFwiXCIifV19LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbInByb3ZpZGVycyJdLCJ0eXBlIjoib2JqZWN0In0sIm9scyI6eyJkZXNjcmlwdGlvbiI6Ik9MU1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBPTFMgZGVwbG95bWVudC4iLCJwcm9wZXJ0aWVzIjp7ImFkZGl0aW9uYWxDQUNvbmZpZ01hcFJlZiI6eyJkZXNjcmlwdGlvbiI6IkFkZGl0aW9uYWwgQ0EgY2VydGlmaWNhdGVzIGZvciBUTFMgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIE9MUyBzZXJ2aWNlIGFuZCBMTE0gUHJvdmlkZXIiLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVmYXVsdCI6IiIsImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuXG5UaGlzIGZpZWxkIGlzIGVmZmVjdGl2ZWx5IHJlcXVpcmVkLCBidXQgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGlzXG5hbGxvd2VkIHRvIGJlIGVtcHR5LiBJbnN0YW5jZXMgb2YgdGhpcyB0eXBlIHdpdGggYW4gZW1wdHkgdmFsdWUgaGVyZSBhcmVcbmFsbW9zdCBjZXJ0YWlubHkgd3JvbmcuXG5Nb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL292ZXJ2aWV3L3dvcmtpbmctd2l0aC1vYmplY3RzL25hbWVzLyNuYW1lcyIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtbWFwLXR5cGUiOiJhdG9taWMifSwiY29udmVyc2F0aW9uQ2FjaGUiOnsiZGVzY3JpcHRpb24iOiJDb252ZXJzYXRpb24gY2FjaGUgc2V0dGluZ3MiLCJwcm9wZXJ0aWVzIjp7InBvc3RncmVzIjp7ImRlc2NyaXB0aW9uIjoiUG9zdGdyZXNTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgUG9zdGdyZXMuIiwicHJvcGVydGllcyI6eyJjcmVkZW50aWFsc1NlY3JldCI6eyJkZWZhdWx0IjoibGlnaHRzcGVlZC1wb3N0Z3Jlcy1zZWNyZXQiLCJkZXNjcmlwdGlvbiI6IlNlY3JldCB0aGF0IGhvbGRzIHBvc3RncmVzIGNyZWRlbnRpYWxzIiwidHlwZSI6InN0cmluZyJ9LCJkYk5hbWUiOnsiZGVmYXVsdCI6InBvc3RncmVzIiwiZGVzY3JpcHRpb24iOiJQb3N0Z3JlcyBkYXRhYmFzZSBuYW1lIiwidHlwZSI6InN0cmluZyJ9LCJtYXhDb25uZWN0aW9ucyI6eyJkZWZhdWx0IjoyMDAwLCJkZXNjcmlwdGlvbiI6IlBvc3RncmVzIG1heGNvbm5lY3Rpb25zLiBEZWZhdWx0OiBcIjIwMDBcIiIsInR5cGUiOiJpbnRlZ2VyIn0sInNoYXJlZEJ1ZmZlcnMiOnsiZGVmYXVsdCI6IjI1Nk1CIiwiZGVzY3JpcHRpb24iOiJQb3N0Z3JlcyBzaGFyZWRidWZmZXJzIiwidHlwZSI6InN0cmluZyIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwidXNlciI6eyJkZWZhdWx0IjoicG9zdGdyZXMiLCJkZXNjcmlwdGlvbiI6IlBvc3RncmVzIHVzZXIgbmFtZSIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6eyJkZWZhdWx0IjoicG9zdGdyZXMiLCJkZXNjcmlwdGlvbiI6IkNvbnZlcnNhdGlvbiBjYWNoZSB0eXBlLiBEZWZhdWx0OiBcInBvc3RncmVzXCIiLCJlbnVtIjpbInBvc3RncmVzIl0sInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwiZGVmYXVsdE1vZGVsIjp7ImRlc2NyaXB0aW9uIjoiRGVmYXVsdCBtb2RlbCBmb3IgdXNhZ2UiLCJ0eXBlIjoic3RyaW5nIn0sImRlZmF1bHRQcm92aWRlciI6eyJkZXNjcmlwdGlvbiI6IkRlZmF1bHQgcHJvdmlkZXIgZm9yIHVzYWdlIiwidHlwZSI6InN0cmluZyJ9LCJkZXBsb3ltZW50Ijp7ImRlc2NyaXB0aW9uIjoiT0xTIGRlcGxveW1lbnQgc2V0dGluZ3MiLCJwcm9wZXJ0aWVzIjp7ImFwaSI6eyJkZXNjcmlwdGlvbiI6IkFQSSBjb250YWluZXIgc2V0dGluZ3MuIiwicHJvcGVydGllcyI6eyJub2RlU2VsZWN0b3IiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sInJlc291cmNlcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlUmVxdWlyZW1lbnRzIGRlc2NyaWJlcyB0aGUgY29tcHV0ZSByZXNvdXJjZSByZXF1aXJlbWVudHMuIiwicHJvcGVydGllcyI6eyJjbGFpbXMiOnsiZGVzY3JpcHRpb24iOiJDbGFpbXMgbGlzdHMgdGhlIG5hbWVzIG9mIHJlc291cmNlcywgZGVmaW5lZCBpbiBzcGVjLnJlc291cmNlQ2xhaW1zLFxudGhhdCBhcmUgdXNlZCBieSB0aGlzIGNvbnRhaW5lci5cblxuVGhpcyBpcyBhbiBhbHBoYSBmaWVsZCBhbmQgcmVxdWlyZXMgZW5hYmxpbmcgdGhlXG5EeW5hbWljUmVzb3VyY2VBbGxvY2F0aW9uIGZlYXR1cmUgZ2F0ZS5cblxuVGhpcyBmaWVsZCBpcyBpbW11dGFibGUuIEl0IGNhbiBvbmx5IGJlIHNldCBmb3IgY29udGFpbmVycy4iLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlQ2xhaW0gcmVmZXJlbmNlcyBvbmUgZW50cnkgaW4gUG9kU3BlYy5SZXNvdXJjZUNsYWltcy4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG11c3QgbWF0Y2ggdGhlIG5hbWUgb2Ygb25lIGVudHJ5IGluIHBvZC5zcGVjLnJlc291cmNlQ2xhaW1zIG9mXG50aGUgUG9kIHdoZXJlIHRoaXMgZmllbGQgaXMgdXNlZC4gSXQgbWFrZXMgdGhhdCByZXNvdXJjZSBhdmFpbGFibGVcbmluc2lkZSBhIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInJlcXVlc3QiOnsiZGVzY3JpcHRpb24iOiJSZXF1ZXN0IGlzIHRoZSBuYW1lIGNob3NlbiBmb3IgYSByZXF1ZXN0IGluIHRoZSByZWZlcmVuY2VkIGNsYWltLlxuSWYgZW1wdHksIGV2ZXJ5dGhpbmcgZnJvbSB0aGUgY2xhaW0gaXMgbWFkZSBhdmFpbGFibGUsIG90aGVyd2lzZVxub25seSB0aGUgcmVzdWx0IG9mIHRoaXMgcmVxdWVzdC4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJuYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5IiwieC1rdWJlcm5ldGVzLWxpc3QtbWFwLWtleXMiOlsibmFtZSJdLCJ4LWt1YmVybmV0ZXMtbGlzdC10eXBlIjoibWFwIn0sImxpbWl0cyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sInBhdHRlcm4iOiJeKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKChbS01HVFBFXWkpfFtudW1rTUdUUEVdfChbZUVdKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKSk/JCIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwiZGVzY3JpcHRpb24iOiJMaW1pdHMgZGVzY3JpYmVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBjb21wdXRlIHJlc291cmNlcyBhbGxvd2VkLlxuTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In0sInJlcXVlc3RzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJkZXNjcmlwdGlvbiI6IlJlcXVlc3RzIGRlc2NyaWJlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgcmVxdWlyZWQuXG5JZiBSZXF1ZXN0cyBpcyBvbWl0dGVkIGZvciBhIGNvbnRhaW5lciwgaXQgZGVmYXVsdHMgdG8gTGltaXRzIGlmIHRoYXQgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQsXG5vdGhlcndpc2UgdG8gYW4gaW1wbGVtZW50YXRpb24tZGVmaW5lZCB2YWx1ZS4gUmVxdWVzdHMgY2Fubm90IGV4Y2VlZCBMaW1pdHMuXG5Nb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vbWFuYWdlLXJlc291cmNlcy1jb250YWluZXJzLyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwidG9sZXJhdGlvbnMiOnsiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJUaGUgcG9kIHRoaXMgVG9sZXJhdGlvbiBpcyBhdHRhY2hlZCB0byB0b2xlcmF0ZXMgYW55IHRhaW50IHRoYXQgbWF0Y2hlc1xudGhlIHRyaXBsZSBcdTAwM2NrZXksdmFsdWUsZWZmZWN0XHUwMDNlIHVzaW5nIHRoZSBtYXRjaGluZyBvcGVyYXRvciBcdTAwM2NvcGVyYXRvclx1MDAzZS4iLCJwcm9wZXJ0aWVzIjp7ImVmZmVjdCI6eyJkZXNjcmlwdGlvbiI6IkVmZmVjdCBpbmRpY2F0ZXMgdGhlIHRhaW50IGVmZmVjdCB0byBtYXRjaC4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGVmZmVjdHMuXG5XaGVuIHNwZWNpZmllZCwgYWxsb3dlZCB2YWx1ZXMgYXJlIE5vU2NoZWR1bGUsIFByZWZlck5vU2NoZWR1bGUgYW5kIE5vRXhlY3V0ZS4iLCJ0eXBlIjoic3RyaW5nIn0sImtleSI6eyJkZXNjcmlwdGlvbiI6IktleSBpcyB0aGUgdGFpbnQga2V5IHRoYXQgdGhlIHRvbGVyYXRpb24gYXBwbGllcyB0by4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGtleXMuXG5JZiB0aGUga2V5IGlzIGVtcHR5LCBvcGVyYXRvciBtdXN0IGJlIEV4aXN0czsgdGhpcyBjb21iaW5hdGlvbiBtZWFucyB0byBtYXRjaCBhbGwgdmFsdWVzIGFuZCBhbGwga2V5cy4iLCJ0eXBlIjoic3RyaW5nIn0sIm9wZXJhdG9yIjp7ImRlc2NyaXB0aW9uIjoiT3BlcmF0b3IgcmVwcmVzZW50cyBhIGtleSdzIHJlbGF0aW9uc2hpcCB0byB0aGUgdmFsdWUuXG5WYWxpZCBvcGVyYXRvcnMgYXJlIEV4aXN0cyBhbmQgRXF1YWwuIERlZmF1bHRzIHRvIEVxdWFsLlxuRXhpc3RzIGlzIGVxdWl2YWxlbnQgdG8gd2lsZGNhcmQgZm9yIHZhbHVlLCBzbyB0aGF0IGEgcG9kIGNhblxudG9sZXJhdGUgYWxsIHRhaW50cyBvZiBhIHBhcnRpY3VsYXIgY2F0ZWdvcnkuIiwidHlwZSI6InN0cmluZyJ9LCJ0b2xlcmF0aW9uU2Vjb25kcyI6eyJkZXNjcmlwdGlvbiI6IlRvbGVyYXRpb25TZWNvbmRzIHJlcHJlc2VudHMgdGhlIHBlcmlvZCBvZiB0aW1lIHRoZSB0b2xlcmF0aW9uICh3aGljaCBtdXN0IGJlXG5vZiBlZmZlY3QgTm9FeGVjdXRlLCBvdGhlcndpc2UgdGhpcyBmaWVsZCBpcyBpZ25vcmVkKSB0b2xlcmF0ZXMgdGhlIHRhaW50LiBCeSBkZWZhdWx0LFxuaXQgaXMgbm90IHNldCwgd2hpY2ggbWVhbnMgdG9sZXJhdGUgdGhlIHRhaW50IGZvcmV2ZXIgKGRvIG5vdCBldmljdCkuIFplcm8gYW5kXG5uZWdhdGl2ZSB2YWx1ZXMgd2lsbCBiZSB0cmVhdGVkIGFzIDAgKGV2aWN0IGltbWVkaWF0ZWx5KSBieSB0aGUgc3lzdGVtLiIsImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwidmFsdWUiOnsiZGVzY3JpcHRpb24iOiJWYWx1ZSBpcyB0aGUgdGFpbnQgdmFsdWUgdGhlIHRvbGVyYXRpb24gbWF0Y2hlcyB0by5cbklmIHRoZSBvcGVyYXRvciBpcyBFeGlzdHMsIHRoZSB2YWx1ZSBzaG91bGQgYmUgZW1wdHksIG90aGVyd2lzZSBqdXN0IGEgcmVndWxhciBzdHJpbmcuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInR5cGUiOiJvYmplY3QifSwiY29uc29sZSI6eyJkZXNjcmlwdGlvbiI6IkNvbnNvbGUgY29udGFpbmVyIHNldHRpbmdzLiIsInByb3BlcnRpZXMiOnsiY2FDZXJ0aWZpY2F0ZSI6eyJkZXNjcmlwdGlvbiI6IkNlcnRpZmljYXRlIEF1dGhvcml0eSAoQ0EpIGNlcnRpZmljYXRlIHVzZWQgYnkgdGhlIGNvbnNvbGUgcHJveHkgZW5kcG9pbnQuIiwicGF0dGVybiI6Il4tLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0oW1xcc1xcU10qKS0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS1cXHM/JCIsInR5cGUiOiJzdHJpbmcifSwibm9kZVNlbGVjdG9yIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6Im9iamVjdCJ9LCJyZXBsaWNhcyI6eyJkZWZhdWx0IjoxLCJkZXNjcmlwdGlvbiI6IkRlZmluZXMgdGhlIG51bWJlciBvZiBkZXNpcmVkIENvbnNvbGUgcG9kcy4gRGVmYXVsdDogXCIxXCIiLCJmb3JtYXQiOiJpbnQzMiIsIm1pbmltdW0iOjAsInR5cGUiOiJpbnRlZ2VyIn0sInJlc291cmNlcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlUmVxdWlyZW1lbnRzIGRlc2NyaWJlcyB0aGUgY29tcHV0ZSByZXNvdXJjZSByZXF1aXJlbWVudHMuIiwicHJvcGVydGllcyI6eyJjbGFpbXMiOnsiZGVzY3JpcHRpb24iOiJDbGFpbXMgbGlzdHMgdGhlIG5hbWVzIG9mIHJlc291cmNlcywgZGVmaW5lZCBpbiBzcGVjLnJlc291cmNlQ2xhaW1zLFxudGhhdCBhcmUgdXNlZCBieSB0aGlzIGNvbnRhaW5lci5cblxuVGhpcyBpcyBhbiBhbHBoYSBmaWVsZCBhbmQgcmVxdWlyZXMgZW5hYmxpbmcgdGhlXG5EeW5hbWljUmVzb3VyY2VBbGxvY2F0aW9uIGZlYXR1cmUgZ2F0ZS5cblxuVGhpcyBmaWVsZCBpcyBpbW11dGFibGUuIEl0IGNhbiBvbmx5IGJlIHNldCBmb3IgY29udGFpbmVycy4iLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlQ2xhaW0gcmVmZXJlbmNlcyBvbmUgZW50cnkgaW4gUG9kU3BlYy5SZXNvdXJjZUNsYWltcy4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG11c3QgbWF0Y2ggdGhlIG5hbWUgb2Ygb25lIGVudHJ5IGluIHBvZC5zcGVjLnJlc291cmNlQ2xhaW1zIG9mXG50aGUgUG9kIHdoZXJlIHRoaXMgZmllbGQgaXMgdXNlZC4gSXQgbWFrZXMgdGhhdCByZXNvdXJjZSBhdmFpbGFibGVcbmluc2lkZSBhIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInJlcXVlc3QiOnsiZGVzY3JpcHRpb24iOiJSZXF1ZXN0IGlzIHRoZSBuYW1lIGNob3NlbiBmb3IgYSByZXF1ZXN0IGluIHRoZSByZWZlcmVuY2VkIGNsYWltLlxuSWYgZW1wdHksIGV2ZXJ5dGhpbmcgZnJvbSB0aGUgY2xhaW0gaXMgbWFkZSBhdmFpbGFibGUsIG90aGVyd2lzZVxub25seSB0aGUgcmVzdWx0IG9mIHRoaXMgcmVxdWVzdC4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJuYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5IiwieC1rdWJlcm5ldGVzLWxpc3QtbWFwLWtleXMiOlsibmFtZSJdLCJ4LWt1YmVybmV0ZXMtbGlzdC10eXBlIjoibWFwIn0sImxpbWl0cyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sInBhdHRlcm4iOiJeKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKChbS01HVFBFXWkpfFtudW1rTUdUUEVdfChbZUVdKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKSk/JCIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwiZGVzY3JpcHRpb24iOiJMaW1pdHMgZGVzY3JpYmVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBjb21wdXRlIHJlc291cmNlcyBhbGxvd2VkLlxuTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In0sInJlcXVlc3RzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJkZXNjcmlwdGlvbiI6IlJlcXVlc3RzIGRlc2NyaWJlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgcmVxdWlyZWQuXG5JZiBSZXF1ZXN0cyBpcyBvbWl0dGVkIGZvciBhIGNvbnRhaW5lciwgaXQgZGVmYXVsdHMgdG8gTGltaXRzIGlmIHRoYXQgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQsXG5vdGhlcndpc2UgdG8gYW4gaW1wbGVtZW50YXRpb24tZGVmaW5lZCB2YWx1ZS4gUmVxdWVzdHMgY2Fubm90IGV4Y2VlZCBMaW1pdHMuXG5Nb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vbWFuYWdlLXJlc291cmNlcy1jb250YWluZXJzLyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwidG9sZXJhdGlvbnMiOnsiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJUaGUgcG9kIHRoaXMgVG9sZXJhdGlvbiBpcyBhdHRhY2hlZCB0byB0b2xlcmF0ZXMgYW55IHRhaW50IHRoYXQgbWF0Y2hlc1xudGhlIHRyaXBsZSBcdTAwM2NrZXksdmFsdWUsZWZmZWN0XHUwMDNlIHVzaW5nIHRoZSBtYXRjaGluZyBvcGVyYXRvciBcdTAwM2NvcGVyYXRvclx1MDAzZS4iLCJwcm9wZXJ0aWVzIjp7ImVmZmVjdCI6eyJkZXNjcmlwdGlvbiI6IkVmZmVjdCBpbmRpY2F0ZXMgdGhlIHRhaW50IGVmZmVjdCB0byBtYXRjaC4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGVmZmVjdHMuXG5XaGVuIHNwZWNpZmllZCwgYWxsb3dlZCB2YWx1ZXMgYXJlIE5vU2NoZWR1bGUsIFByZWZlck5vU2NoZWR1bGUgYW5kIE5vRXhlY3V0ZS4iLCJ0eXBlIjoic3RyaW5nIn0sImtleSI6eyJkZXNjcmlwdGlvbiI6IktleSBpcyB0aGUgdGFpbnQga2V5IHRoYXQgdGhlIHRvbGVyYXRpb24gYXBwbGllcyB0by4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGtleXMuXG5JZiB0aGUga2V5IGlzIGVtcHR5LCBvcGVyYXRvciBtdXN0IGJlIEV4aXN0czsgdGhpcyBjb21iaW5hdGlvbiBtZWFucyB0byBtYXRjaCBhbGwgdmFsdWVzIGFuZCBhbGwga2V5cy4iLCJ0eXBlIjoic3RyaW5nIn0sIm9wZXJhdG9yIjp7ImRlc2NyaXB0aW9uIjoiT3BlcmF0b3IgcmVwcmVzZW50cyBhIGtleSdzIHJlbGF0aW9uc2hpcCB0byB0aGUgdmFsdWUuXG5WYWxpZCBvcGVyYXRvcnMgYXJlIEV4aXN0cyBhbmQgRXF1YWwuIERlZmF1bHRzIHRvIEVxdWFsLlxuRXhpc3RzIGlzIGVxdWl2YWxlbnQgdG8gd2lsZGNhcmQgZm9yIHZhbHVlLCBzbyB0aGF0IGEgcG9kIGNhblxudG9sZXJhdGUgYWxsIHRhaW50cyBvZiBhIHBhcnRpY3VsYXIgY2F0ZWdvcnkuIiwidHlwZSI6InN0cmluZyJ9LCJ0b2xlcmF0aW9uU2Vjb25kcyI6eyJkZXNjcmlwdGlvbiI6IlRvbGVyYXRpb25TZWNvbmRzIHJlcHJlc2VudHMgdGhlIHBlcmlvZCBvZiB0aW1lIHRoZSB0b2xlcmF0aW9uICh3aGljaCBtdXN0IGJlXG5vZiBlZmZlY3QgTm9FeGVjdXRlLCBvdGhlcndpc2UgdGhpcyBmaWVsZCBpcyBpZ25vcmVkKSB0b2xlcmF0ZXMgdGhlIHRhaW50LiBCeSBkZWZhdWx0LFxuaXQgaXMgbm90IHNldCwgd2hpY2ggbWVhbnMgdG9sZXJhdGUgdGhlIHRhaW50IGZvcmV2ZXIgKGRvIG5vdCBldmljdCkuIFplcm8gYW5kXG5uZWdhdGl2ZSB2YWx1ZXMgd2lsbCBiZSB0cmVhdGVkIGFzIDAgKGV2aWN0IGltbWVkaWF0ZWx5KSBieSB0aGUgc3lzdGVtLiIsImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwidmFsdWUiOnsiZGVzY3JpcHRpb24iOiJWYWx1ZSBpcyB0aGUgdGFpbnQgdmFsdWUgdGhlIHRvbGVyYXRpb24gbWF0Y2hlcyB0by5cbklmIHRoZSBvcGVyYXRvciBpcyBFeGlzdHMsIHRoZSB2YWx1ZSBzaG91bGQgYmUgZW1wdHksIG90aGVyd2lzZSBqdXN0IGEgcmVndWxhciBzdHJpbmcuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInR5cGUiOiJvYmplY3QifSwiZGF0YUNvbGxlY3RvciI6eyJkZXNjcmlwdGlvbiI6IkRhdGEgQ29sbGVjdG9yIGNvbnRhaW5lciBzZXR0aW5ncy4iLCJwcm9wZXJ0aWVzIjp7InJlc291cmNlcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlUmVxdWlyZW1lbnRzIGRlc2NyaWJlcyB0aGUgY29tcHV0ZSByZXNvdXJjZSByZXF1aXJlbWVudHMuIiwicHJvcGVydGllcyI6eyJjbGFpbXMiOnsiZGVzY3JpcHRpb24iOiJDbGFpbXMgbGlzdHMgdGhlIG5hbWVzIG9mIHJlc291cmNlcywgZGVmaW5lZCBpbiBzcGVjLnJlc291cmNlQ2xhaW1zLFxudGhhdCBhcmUgdXNlZCBieSB0aGlzIGNvbnRhaW5lci5cblxuVGhpcyBpcyBhbiBhbHBoYSBmaWVsZCBhbmQgcmVxdWlyZXMgZW5hYmxpbmcgdGhlXG5EeW5hbWljUmVzb3VyY2VBbGxvY2F0aW9uIGZlYXR1cmUgZ2F0ZS5cblxuVGhpcyBmaWVsZCBpcyBpbW11dGFibGUuIEl0IGNhbiBvbmx5IGJlIHNldCBmb3IgY29udGFpbmVycy4iLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlQ2xhaW0gcmVmZXJlbmNlcyBvbmUgZW50cnkgaW4gUG9kU3BlYy5SZXNvdXJjZUNsYWltcy4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG11c3QgbWF0Y2ggdGhlIG5hbWUgb2Ygb25lIGVudHJ5IGluIHBvZC5zcGVjLnJlc291cmNlQ2xhaW1zIG9mXG50aGUgUG9kIHdoZXJlIHRoaXMgZmllbGQgaXMgdXNlZC4gSXQgbWFrZXMgdGhhdCByZXNvdXJjZSBhdmFpbGFibGVcbmluc2lkZSBhIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInJlcXVlc3QiOnsiZGVzY3JpcHRpb24iOiJSZXF1ZXN0IGlzIHRoZSBuYW1lIGNob3NlbiBmb3IgYSByZXF1ZXN0IGluIHRoZSByZWZlcmVuY2VkIGNsYWltLlxuSWYgZW1wdHksIGV2ZXJ5dGhpbmcgZnJvbSB0aGUgY2xhaW0gaXMgbWFkZSBhdmFpbGFibGUsIG90aGVyd2lzZVxub25seSB0aGUgcmVzdWx0IG9mIHRoaXMgcmVxdWVzdC4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJuYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5IiwieC1rdWJlcm5ldGVzLWxpc3QtbWFwLWtleXMiOlsibmFtZSJdLCJ4LWt1YmVybmV0ZXMtbGlzdC10eXBlIjoibWFwIn0sImxpbWl0cyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sInBhdHRlcm4iOiJeKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKChbS01HVFBFXWkpfFtudW1rTUdUUEVdfChbZUVdKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKSk/JCIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwiZGVzY3JpcHRpb24iOiJMaW1pdHMgZGVzY3JpYmVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBjb21wdXRlIHJlc291cmNlcyBhbGxvd2VkLlxuTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In0sInJlcXVlc3RzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJkZXNjcmlwdGlvbiI6IlJlcXVlc3RzIGRlc2NyaWJlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgcmVxdWlyZWQuXG5JZiBSZXF1ZXN0cyBpcyBvbWl0dGVkIGZvciBhIGNvbnRhaW5lciwgaXQgZGVmYXVsdHMgdG8gTGltaXRzIGlmIHRoYXQgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQsXG5vdGhlcndpc2UgdG8gYW4gaW1wbGVtZW50YXRpb24tZGVmaW5lZCB2YWx1ZS4gUmVxdWVzdHMgY2Fubm90IGV4Y2VlZCBMaW1pdHMuXG5Nb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vbWFuYWdlLXJlc291cmNlcy1jb250YWluZXJzLyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwicmVwbGljYXMiOnsiZGVmYXVsdCI6MSwiZGVzY3JpcHRpb24iOiJEZWZpbmVzIHRoZSBudW1iZXIgb2YgZGVzaXJlZCBPTFMgcG9kcy4gRGVmYXVsdDogXCIxXCIiLCJmb3JtYXQiOiJpbnQzMiIsIm1pbmltdW0iOjAsInR5cGUiOiJpbnRlZ2VyIn19LCJ0eXBlIjoib2JqZWN0In0sImludHJvc3BlY3Rpb25FbmFibGVkIjp7ImRlc2NyaXB0aW9uIjoiRW5hYmxlIGludHJvc3BlY3Rpb24gZmVhdHVyZXMiLCJ0eXBlIjoiYm9vbGVhbiJ9LCJsb2dMZXZlbCI6eyJkZWZhdWx0IjoiSU5GTyIsImRlc2NyaXB0aW9uIjoiTG9nIGxldmVsLiBWYWxpZCBvcHRpb25zIGFyZSBERUJVRywgSU5GTywgV0FSTklORywgRVJST1IgYW5kIENSSVRJQ0FMLiBEZWZhdWx0OiBcIklORk9cIi4iLCJlbnVtIjpbIkRFQlVHIiwiSU5GTyIsIldBUk5JTkciLCJFUlJPUiIsIkNSSVRJQ0FMIl0sInR5cGUiOiJzdHJpbmcifSwicXVlcnlGaWx0ZXJzIjp7ImRlc2NyaXB0aW9uIjoiUXVlcnkgZmlsdGVycyIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiUXVlcnlGaWx0ZXJzU3BlYyBkZWZpbmVzIGZpbHRlcnMgdG8gbWFuaXB1bGF0ZSBxdWVzdGlvbnMvcXVlcmllcy4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJGaWx0ZXIgbmFtZS4iLCJ0eXBlIjoic3RyaW5nIn0sInBhdHRlcm4iOnsiZGVzY3JpcHRpb24iOiJGaWx0ZXIgcGF0dGVybi4iLCJ0eXBlIjoic3RyaW5nIn0sInJlcGxhY2VXaXRoIjp7ImRlc2NyaXB0aW9uIjoiUmVwbGFjZW1lbnQgZm9yIHRoZSBtYXRjaGVkIHBhdHRlcm4uIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwidGxzQ29uZmlnIjp7ImRlc2NyaXB0aW9uIjoiVExTIGNvbmZpZ3VyYXRpb24gb2YgdGhlIExpZ2h0c3BlZWQgYmFja2VuZCdzIEhUVFBTIGVuZHBvaW50IiwicHJvcGVydGllcyI6eyJrZXlDZXJ0U2VjcmV0UmVmIjp7ImRlc2NyaXB0aW9uIjoiS2V5U2VjcmV0UmVmIGlzIHRoZSBzZWNyZXQgdGhhdCBob2xkcyB0aGUgVExTIGtleS4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVmYXVsdCI6IiIsImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuXG5UaGlzIGZpZWxkIGlzIGVmZmVjdGl2ZWx5IHJlcXVpcmVkLCBidXQgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGlzXG5hbGxvd2VkIHRvIGJlIGVtcHR5LiBJbnN0YW5jZXMgb2YgdGhpcyB0eXBlIHdpdGggYW4gZW1wdHkgdmFsdWUgaGVyZSBhcmVcbmFsbW9zdCBjZXJ0YWlubHkgd3JvbmcuXG5Nb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL292ZXJ2aWV3L3dvcmtpbmctd2l0aC1vYmplY3RzL25hbWVzLyNuYW1lcyIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtbWFwLXR5cGUiOiJhdG9taWMifX0sInR5cGUiOiJvYmplY3QifSwidGxzU2VjdXJpdHlQcm9maWxlIjp7ImRlc2NyaXB0aW9uIjoiVExTIFNlY3VyaXR5IFByb2ZpbGUgdXNlZCBieSBBUEkgZW5kcG9pbnRzIiwicHJvcGVydGllcyI6eyJjdXN0b20iOnsiZGVzY3JpcHRpb24iOiJjdXN0b20gaXMgYSB1c2VyLWRlZmluZWQgVExTIHNlY3VyaXR5IHByb2ZpbGUuIEJlIGV4dHJlbWVseSBjYXJlZnVsIHVzaW5nIGEgY3VzdG9tXG5wcm9maWxlIGFzIGludmFsaWQgY29uZmlndXJhdGlvbnMgY2FuIGJlIGNhdGFzdHJvcGhpYy4gQW4gZXhhbXBsZSBjdXN0b20gcHJvZmlsZVxubG9va3MgbGlrZSB0aGlzOlxuXG4gIGNpcGhlcnM6XG5cbiAgICAtIEVDREhFLUVDRFNBLUNIQUNIQTIwLVBPTFkxMzA1XG5cbiAgICAtIEVDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBFQ0RIRS1SU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICBtaW5UTFNWZXJzaW9uOiBWZXJzaW9uVExTMTEiLCJudWxsYWJsZSI6dHJ1ZSwicHJvcGVydGllcyI6eyJjaXBoZXJzIjp7ImRlc2NyaXB0aW9uIjoiY2lwaGVycyBpcyB1c2VkIHRvIHNwZWNpZnkgdGhlIGNpcGhlciBhbGdvcml0aG1zIHRoYXQgYXJlIG5lZ290aWF0ZWRcbmR1cmluZyB0aGUgVExTIGhhbmRzaGFrZS4gIE9wZXJhdG9ycyBtYXkgcmVtb3ZlIGVudHJpZXMgdGhlaXIgb3BlcmFuZHNcbmRvIG5vdCBzdXBwb3J0LiAgRm9yIGV4YW1wbGUsIHRvIHVzZSBERVMtQ0JDMy1TSEEgICh5YW1sKTpcblxuICBjaXBoZXJzOlxuICAgIC0gREVTLUNCQzMtU0hBIiwiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibWluVExTVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6Im1pblRMU1ZlcnNpb24gaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBtaW5pbWFsIHZlcnNpb24gb2YgdGhlIFRMUyBwcm90b2NvbFxudGhhdCBpcyBuZWdvdGlhdGVkIGR1cmluZyB0aGUgVExTIGhhbmRzaGFrZS4gRm9yIGV4YW1wbGUsIHRvIHVzZSBUTFNcbnZlcnNpb25zIDEuMSwgMS4yIGFuZCAxLjMgKHlhbWwpOlxuXG4gIG1pblRMU1ZlcnNpb246IFZlcnNpb25UTFMxMVxuXG5OT1RFOiBjdXJyZW50bHkgdGhlIGhpZ2hlc3QgbWluVExTVmVyc2lvbiBhbGxvd2VkIGlzIFZlcnNpb25UTFMxMiIsImVudW0iOlsiVmVyc2lvblRMUzEwIiwiVmVyc2lvblRMUzExIiwiVmVyc2lvblRMUzEyIiwiVmVyc2lvblRMUzEzIl0sInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwiaW50ZXJtZWRpYXRlIjp7ImRlc2NyaXB0aW9uIjoiaW50ZXJtZWRpYXRlIGlzIGEgVExTIHNlY3VyaXR5IHByb2ZpbGUgYmFzZWQgb246XG5cbmh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9TZWN1cml0eS9TZXJ2ZXJfU2lkZV9UTFMjSW50ZXJtZWRpYXRlX2NvbXBhdGliaWxpdHlfLjI4cmVjb21tZW5kZWQuMjlcblxuYW5kIGxvb2tzIGxpa2UgdGhpcyAoeWFtbCk6XG5cbiAgY2lwaGVyczpcblxuICAgIC0gVExTX0FFU18xMjhfR0NNX1NIQTI1NlxuXG4gICAgLSBUTFNfQUVTXzI1Nl9HQ01fU0hBMzg0XG5cbiAgICAtIFRMU19DSEFDSEEyMF9QT0xZMTMwNV9TSEEyNTZcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gRUNESEUtUlNBLUFFUzEyOC1HQ00tU0hBMjU2XG5cbiAgICAtIEVDREhFLUVDRFNBLUFFUzI1Ni1HQ00tU0hBMzg0XG5cbiAgICAtIEVDREhFLVJTQS1BRVMyNTYtR0NNLVNIQTM4NFxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBFQ0RIRS1SU0EtQ0hBQ0hBMjAtUE9MWTEzMDVcblxuICAgIC0gREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NlxuXG4gICAgLSBESEUtUlNBLUFFUzI1Ni1HQ00tU0hBMzg0XG5cbiAgbWluVExTVmVyc2lvbjogVmVyc2lvblRMUzEyIiwibnVsbGFibGUiOnRydWUsInR5cGUiOiJvYmplY3QifSwibW9kZXJuIjp7ImRlc2NyaXB0aW9uIjoibW9kZXJuIGlzIGEgVExTIHNlY3VyaXR5IHByb2ZpbGUgYmFzZWQgb246XG5cbmh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9TZWN1cml0eS9TZXJ2ZXJfU2lkZV9UTFMjTW9kZXJuX2NvbXBhdGliaWxpdHlcblxuYW5kIGxvb2tzIGxpa2UgdGhpcyAoeWFtbCk6XG5cbiAgY2lwaGVyczpcblxuICAgIC0gVExTX0FFU18xMjhfR0NNX1NIQTI1NlxuXG4gICAgLSBUTFNfQUVTXzI1Nl9HQ01fU0hBMzg0XG5cbiAgICAtIFRMU19DSEFDSEEyMF9QT0xZMTMwNV9TSEEyNTZcblxuICBtaW5UTFNWZXJzaW9uOiBWZXJzaW9uVExTMTMiLCJudWxsYWJsZSI6dHJ1ZSwidHlwZSI6Im9iamVjdCJ9LCJvbGQiOnsiZGVzY3JpcHRpb24iOiJvbGQgaXMgYSBUTFMgc2VjdXJpdHkgcHJvZmlsZSBiYXNlZCBvbjpcblxuaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L1NlcnZlcl9TaWRlX1RMUyNPbGRfYmFja3dhcmRfY29tcGF0aWJpbGl0eVxuXG5hbmQgbG9va3MgbGlrZSB0aGlzICh5YW1sKTpcblxuICBjaXBoZXJzOlxuXG4gICAgLSBUTFNfQUVTXzEyOF9HQ01fU0hBMjU2XG5cbiAgICAtIFRMU19BRVNfMjU2X0dDTV9TSEEzODRcblxuICAgIC0gVExTX0NIQUNIQTIwX1BPTFkxMzA1X1NIQTI1NlxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1BRVMxMjgtR0NNLVNIQTI1NlxuXG4gICAgLSBFQ0RIRS1SU0EtQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMjU2LUdDTS1TSEEzODRcblxuICAgIC0gRUNESEUtUlNBLUFFUzI1Ni1HQ00tU0hBMzg0XG5cbiAgICAtIEVDREhFLUVDRFNBLUNIQUNIQTIwLVBPTFkxMzA1XG5cbiAgICAtIEVDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBESEUtUlNBLUFFUzEyOC1HQ00tU0hBMjU2XG5cbiAgICAtIERIRS1SU0EtQUVTMjU2LUdDTS1TSEEzODRcblxuICAgIC0gREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNVxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1BRVMxMjgtU0hBMjU2XG5cbiAgICAtIEVDREhFLVJTQS1BRVMxMjgtU0hBMjU2XG5cbiAgICAtIEVDREhFLUVDRFNBLUFFUzEyOC1TSEFcblxuICAgIC0gRUNESEUtUlNBLUFFUzEyOC1TSEFcblxuICAgIC0gRUNESEUtRUNEU0EtQUVTMjU2LVNIQTM4NFxuXG4gICAgLSBFQ0RIRS1SU0EtQUVTMjU2LVNIQTM4NFxuXG4gICAgLSBFQ0RIRS1FQ0RTQS1BRVMyNTYtU0hBXG5cbiAgICAtIEVDREhFLVJTQS1BRVMyNTYtU0hBXG5cbiAgICAtIERIRS1SU0EtQUVTMTI4LVNIQTI1NlxuXG4gICAgLSBESEUtUlNBLUFFUzI1Ni1TSEEyNTZcblxuICAgIC0gQUVTMTI4LUdDTS1TSEEyNTZcblxuICAgIC0gQUVTMjU2LUdDTS1TSEEzODRcblxuICAgIC0gQUVTMTI4LVNIQTI1NlxuXG4gICAgLSBBRVMyNTYtU0hBMjU2XG5cbiAgICAtIEFFUzEyOC1TSEFcblxuICAgIC0gQUVTMjU2LVNIQVxuXG4gICAgLSBERVMtQ0JDMy1TSEFcblxuICBtaW5UTFNWZXJzaW9uOiBWZXJzaW9uVExTMTAiLCJudWxsYWJsZSI6dHJ1ZSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoidHlwZSBpcyBvbmUgb2YgT2xkLCBJbnRlcm1lZGlhdGUsIE1vZGVybiBvciBDdXN0b20uIEN1c3RvbSBwcm92aWRlc1xudGhlIGFiaWxpdHkgdG8gc3BlY2lmeSBpbmRpdmlkdWFsIFRMUyBzZWN1cml0eSBwcm9maWxlIHBhcmFtZXRlcnMuXG5PbGQsIEludGVybWVkaWF0ZSBhbmQgTW9kZXJuIGFyZSBUTFMgc2VjdXJpdHkgcHJvZmlsZXMgYmFzZWQgb246XG5cbmh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9TZWN1cml0eS9TZXJ2ZXJfU2lkZV9UTFMjUmVjb21tZW5kZWRfY29uZmlndXJhdGlvbnNcblxuVGhlIHByb2ZpbGVzIGFyZSBpbnRlbnQgYmFzZWQsIHNvIHRoZXkgbWF5IGNoYW5nZSBvdmVyIHRpbWUgYXMgbmV3IGNpcGhlcnMgYXJlIGRldmVsb3BlZCBhbmQgZXhpc3RpbmcgY2lwaGVyc1xuYXJlIGZvdW5kIHRvIGJlIGluc2VjdXJlLiAgRGVwZW5kaW5nIG9uIHByZWNpc2VseSB3aGljaCBjaXBoZXJzIGFyZSBhdmFpbGFibGUgdG8gYSBwcm9jZXNzLCB0aGUgbGlzdCBtYXkgYmVcbnJlZHVjZWQuXG5cbk5vdGUgdGhhdCB0aGUgTW9kZXJuIHByb2ZpbGUgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgYmVjYXVzZSBpdCBpcyBub3RcbnlldCB3ZWxsIGFkb3B0ZWQgYnkgY29tbW9uIHNvZnR3YXJlIGxpYnJhcmllcy4iLCJlbnVtIjpbIk9sZCIsIkludGVybWVkaWF0ZSIsIk1vZGVybiIsIkN1c3RvbSJdLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInVzZXJEYXRhQ29sbGVjdGlvbiI6eyJkZXNjcmlwdGlvbiI6IlVzZXIgZGF0YSBjb2xsZWN0aW9uIHN3aXRjaGVzIiwicHJvcGVydGllcyI6eyJmZWVkYmFja0Rpc2FibGVkIjp7InR5cGUiOiJib29sZWFuIn0sInRyYW5zY3JpcHRzRGlzYWJsZWQiOnsidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbImRlZmF1bHRNb2RlbCJdLCJ0eXBlIjoib2JqZWN0In0sIm9sc0RhdGFDb2xsZWN0b3IiOnsiZGVzY3JpcHRpb24iOiJPTFNEYXRhQ29sbGVjdG9yU3BlYyBkZWZpbmVzIGFsbG93ZWQgT0xTIGRhdGEgY29sbGVjdG9yIGNvbmZpZ3VyYXRpb24uIiwicHJvcGVydGllcyI6eyJsb2dMZXZlbCI6eyJkZWZhdWx0IjoiSU5GTyIsImRlc2NyaXB0aW9uIjoiTG9nIGxldmVsLiBWYWxpZCBvcHRpb25zIGFyZSBERUJVRywgSU5GTywgV0FSTklORywgRVJST1IgYW5kIENSSVRJQ0FMLiBEZWZhdWx0OiBcIklORk9cIi4iLCJlbnVtIjpbIkRFQlVHIiwiSU5GTyIsIldBUk5JTkciLCJFUlJPUiIsIkNSSVRJQ0FMIl0sInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbImxsbSIsIm9scyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik9MU0NvbmZpZ1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBPTFMgZGVwbG95bWVudC4iLCJwcm9wZXJ0aWVzIjp7ImNvbmRpdGlvbnMiOnsiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJDb25kaXRpb24gY29udGFpbnMgZGV0YWlscyBmb3Igb25lIGFzcGVjdCBvZiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIEFQSSBSZXNvdXJjZS4iLCJwcm9wZXJ0aWVzIjp7Imxhc3RUcmFuc2l0aW9uVGltZSI6eyJkZXNjcmlwdGlvbiI6Imxhc3RUcmFuc2l0aW9uVGltZSBpcyB0aGUgbGFzdCB0aW1lIHRoZSBjb25kaXRpb24gdHJhbnNpdGlvbmVkIGZyb20gb25lIHN0YXR1cyB0byBhbm90aGVyLlxuVGhpcyBzaG91bGQgYmUgd2hlbiB0aGUgdW5kZXJseWluZyBjb25kaXRpb24gY2hhbmdlZC4gIElmIHRoYXQgaXMgbm90IGtub3duLCB0aGVuIHVzaW5nIHRoZSB0aW1lIHdoZW4gdGhlIEFQSSBmaWVsZCBjaGFuZ2VkIGlzIGFjY2VwdGFibGUuIiwiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJtZXNzYWdlIjp7ImRlc2NyaXB0aW9uIjoibWVzc2FnZSBpcyBhIGh1bWFuIHJlYWRhYmxlIG1lc3NhZ2UgaW5kaWNhdGluZyBkZXRhaWxzIGFib3V0IHRoZSB0cmFuc2l0aW9uLlxuVGhpcyBtYXkgYmUgYW4gZW1wdHkgc3RyaW5nLiIsIm1heExlbmd0aCI6MzI3NjgsInR5cGUiOiJzdHJpbmcifSwib2JzZXJ2ZWRHZW5lcmF0aW9uIjp7ImRlc2NyaXB0aW9uIjoib2JzZXJ2ZWRHZW5lcmF0aW9uIHJlcHJlc2VudHMgdGhlIC5tZXRhZGF0YS5nZW5lcmF0aW9uIHRoYXQgdGhlIGNvbmRpdGlvbiB3YXMgc2V0IGJhc2VkIHVwb24uXG5Gb3IgaW5zdGFuY2UsIGlmIC5tZXRhZGF0YS5nZW5lcmF0aW9uIGlzIGN1cnJlbnRseSAxMiwgYnV0IHRoZSAuc3RhdHVzLmNvbmRpdGlvbnNbeF0ub2JzZXJ2ZWRHZW5lcmF0aW9uIGlzIDksIHRoZSBjb25kaXRpb24gaXMgb3V0IG9mIGRhdGVcbndpdGggcmVzcGVjdCB0byB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgaW5zdGFuY2UuIiwiZm9ybWF0IjoiaW50NjQiLCJtaW5pbXVtIjowLCJ0eXBlIjoiaW50ZWdlciJ9LCJyZWFzb24iOnsiZGVzY3JpcHRpb24iOiJyZWFzb24gY29udGFpbnMgYSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBpbmRpY2F0aW5nIHRoZSByZWFzb24gZm9yIHRoZSBjb25kaXRpb24ncyBsYXN0IHRyYW5zaXRpb24uXG5Qcm9kdWNlcnMgb2Ygc3BlY2lmaWMgY29uZGl0aW9uIHR5cGVzIG1heSBkZWZpbmUgZXhwZWN0ZWQgdmFsdWVzIGFuZCBtZWFuaW5ncyBmb3IgdGhpcyBmaWVsZCxcbmFuZCB3aGV0aGVyIHRoZSB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgYSBndWFyYW50ZWVkIEFQSS5cblRoZSB2YWx1ZSBzaG91bGQgYmUgYSBDYW1lbENhc2Ugc3RyaW5nLlxuVGhpcyBmaWVsZCBtYXkgbm90IGJlIGVtcHR5LiIsIm1heExlbmd0aCI6MTAyNCwibWluTGVuZ3RoIjoxLCJwYXR0ZXJuIjoiXltBLVphLXpdKFtBLVphLXowLTlfLDpdKltBLVphLXowLTlfXSk/JCIsInR5cGUiOiJzdHJpbmcifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoic3RhdHVzIG9mIHRoZSBjb25kaXRpb24sIG9uZSBvZiBUcnVlLCBGYWxzZSwgVW5rbm93bi4iLCJlbnVtIjpbIlRydWUiLCJGYWxzZSIsIlVua25vd24iXSwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoidHlwZSBvZiBjb25kaXRpb24gaW4gQ2FtZWxDYXNlIG9yIGluIGZvby5leGFtcGxlLmNvbS9DYW1lbENhc2UuIiwibWF4TGVuZ3RoIjozMTYsInBhdHRlcm4iOiJeKFthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/KFxcLlthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/KSovKT8oKFtBLVphLXowLTldWy1BLVphLXowLTlfLl0qKT9bQS1aYS16MC05XSkkIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsibGFzdFRyYW5zaXRpb25UaW1lIiwibWVzc2FnZSIsInJlYXNvbiIsInN0YXR1cyIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImNvbmRpdGlvbnMiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsic3BlYyJdLCJ0eXBlIjoib2JqZWN0IiwieC1rdWJlcm5ldGVzLXZhbGlkYXRpb25zIjpbeyJtZXNzYWdlIjoiLm1ldGFkYXRhLm5hbWUgbXVzdCBiZSAnY2x1c3RlciciLCJydWxlIjoic2VsZi5tZXRhZGF0YS5uYW1lID09ICdjbHVzdGVyJyJ9XX19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpudWxsLCJzdG9yZWRWZXJzaW9ucyI6bnVsbH19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50IjoibWV0cmljcyIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJjbHVzdGVycm9sZSIsImFwcC5rdWJlcm5ldGVzLmlvL3BhcnQtb2YiOiJsaWdodHNwZWVkLW9wZXJhdG9yIn0sIm5hbWUiOiJsaWdodHNwZWVkLW9wZXJhdG9yLW9scy1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9vbHMtbWV0cmljcy1hY2Nlc3MiXSwidmVyYnMiOlsiZ2V0Il19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50IjoidXNlci1hY2Nlc3MiLCJhcHAua3ViZXJuZXRlcy5pby9jcmVhdGVkLWJ5IjoibGlnaHRzcGVlZC1vcGVyYXRvciIsImFwcC5rdWJlcm5ldGVzLmlvL2luc3RhbmNlIjoicXVlcnktYWNjZXNzIiwiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJjbHVzdGVycm9sZSIsImFwcC5rdWJlcm5ldGVzLmlvL3BhcnQtb2YiOiJsaWdodHNwZWVkLW9wZXJhdG9yIn0sIm5hbWUiOiJsaWdodHNwZWVkLW9wZXJhdG9yLXF1ZXJ5LWFjY2VzcyJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9vbHMtYWNjZXNzIl0sInZlcmJzIjpbImdldCJdfV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZUJpbmRpbmciLCJtZXRhZGF0YSI6eyJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibGFiZWxzIjp7ImFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudCI6Im1ldHJpY3MiLCJhcHAua3ViZXJuZXRlcy5pby9uYW1lIjoiY2x1c3RlcnJvbGViaW5kaW5nIiwiYXBwLmt1YmVybmV0ZXMuaW8vcGFydC1vZiI6ImxpZ2h0c3BlZWQtb3BlcmF0b3IifSwibmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3Itb2xzLW1ldHJpY3MtcmVhZGVyIn0sInJvbGVSZWYiOnsiYXBpR3JvdXAiOiJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIiwia2luZCI6IkNsdXN0ZXJSb2xlIiwibmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3Itb2xzLW1ldHJpY3MtcmVhZGVyIn0sInN1YmplY3RzIjpbeyJraW5kIjoiU2VydmljZUFjY291bnQiLCJuYW1lIjoicHJvbWV0aGV1cy1rOHMiLCJuYW1lc3BhY2UiOiJvcGVuc2hpZnQtbW9uaXRvcmluZyJ9XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsImxhYmVscyI6eyJhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQiOiJtZXRyaWNzIiwiYXBwLmt1YmVybmV0ZXMuaW8vbmFtZSI6InJvbGUiLCJhcHAua3ViZXJuZXRlcy5pby9wYXJ0LW9mIjoibGlnaHRzcGVlZC1vcGVyYXRvciJ9LCJuYW1lIjoibGlnaHRzcGVlZC1vcGVyYXRvci1wcm9tZXRoZXVzLWs4cyJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsic2VydmljZXMiLCJlbmRwb2ludHMiLCJwb2RzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJleHRlbnNpb25zIl0sInJlc291cmNlcyI6WyJpbmdyZXNzZXMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm5ldHdvcmtpbmcuazhzLmlvIl0sInJlc291cmNlcyI6WyJpbmdyZXNzZXMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIl19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50IjoibWV0cmljcyIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJyb2xlYmluZGluZyIsImFwcC5rdWJlcm5ldGVzLmlvL3BhcnQtb2YiOiJsaWdodHNwZWVkLW9wZXJhdG9yIn0sIm5hbWUiOiJsaWdodHNwZWVkLW9wZXJhdG9yLXByb21ldGhldXMtazhzIn0sInJvbGVSZWYiOnsiYXBpR3JvdXAiOiJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIiwia2luZCI6IlJvbGUiLCJuYW1lIjoibGlnaHRzcGVlZC1vcGVyYXRvci1wcm9tZXRoZXVzLWs4cyJ9LCJzdWJqZWN0cyI6W3sia2luZCI6IlNlcnZpY2VBY2NvdW50IiwibmFtZSI6InByb21ldGhldXMtazhzIiwibmFtZXNwYWNlIjoib3BlbnNoaWZ0LW1vbml0b3JpbmcifV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImFubm90YXRpb25zIjp7InNlcnZpY2UuYmV0YS5vcGVuc2hpZnQuaW8vc2VydmluZy1jZXJ0LXNlY3JldC1uYW1lIjoiY29udHJvbGxlci1tYW5hZ2VyLXRscyJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibGFiZWxzIjp7ImFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudCI6Im1hbmFnZXIiLCJhcHAua3ViZXJuZXRlcy5pby9jcmVhdGVkLWJ5IjoibGlnaHRzcGVlZC1vcGVyYXRvciIsImFwcC5rdWJlcm5ldGVzLmlvL2luc3RhbmNlIjoiY29udHJvbGxlci1tYW5hZ2VyLXNlcnZpY2UiLCJhcHAua3ViZXJuZXRlcy5pby9tYW5hZ2VkLWJ5Ijoia3VzdG9taXplIiwiYXBwLmt1YmVybmV0ZXMuaW8vbmFtZSI6InNlcnZpY2UiLCJhcHAua3ViZXJuZXRlcy5pby9wYXJ0LW9mIjoibGlnaHRzcGVlZC1vcGVyYXRvciIsImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Im1ldHJpY3MiLCJwb3J0Ijo4NDQzLCJwcm90b2NvbCI6IlRDUCIsInRhcmdldFBvcnQiOiJtZXRyaWNzIn1dLCJzZWxlY3RvciI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzdGF0dXMiOnsibG9hZEJhbGFuY2VyIjp7fX19
relatedImages:
  - name: lightspeed-service-api
    image: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-service-api-rhel9@sha256:2bd03a394aea76cd62d1b2c858654e6fb4807332d91326a0be0197fc00b50f6b
  - name: lightspeed-console-plugin
    image: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-console-plugin-rhel9@sha256:72bba488a14a7ff59563e15051438f8449f4e16091afdab7a3713f6b323eb95e
  - name: lightspeed-operator
    image: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-rhel9-operator@sha256:fd47a397210f303ea879e5543ec60a354e7d130b124c57c0b93bfa97d5ddbbe6
  - name: lightspeed-operator-bundle
    image: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-operator-bundle@sha256:c1845c2ba81f89feb216ac01cab58743525a95e1693bfafc0552a9eca916e956
schema: olm.bundle
---
schema: olm.channel
package: lightspeed-operator
name: alpha
entries:
  - name: lightspeed-operator.v0.3.3
    skipRange: ">=0.1.0 <0.3.3"
