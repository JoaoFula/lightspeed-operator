---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  annotations:
    pipelinesascode.tekton.dev/task: "[ols-installer, ols-e2e-task]"
  name: ols-console-e2e-tests-pipeline
spec:
  description: |
    This pipeline automates the process of running end-to-end tests for OpenShift Lightspeed
    using a ROSA (Red Hat OpenShift Service on AWS) cluster. The pipeline provisions
    the ROSA cluster, installs the OpenShift Lightspeed operator using the installer, runs the tests, collects artifacts,
    and finally deprovisions the ROSA cluster.
  params:
    - name: SNAPSHOT
      description: 'The JSON string representing the snapshot of the application under test.'
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - name: test-name
      description: 'The name of the test corresponding to a defined Konflux integration test.'
      default: 'ols-console-e2e-tests'
    - name: namespace
      description: 'Namespace to run tests in'
      default: 'openshift-lightspeed'
  tasks:
    - name: eaas-provision-space
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - eaas-provision-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "4.17."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: "m5.large"
    - name: ols-install
      description: Task to install bundle onto ephemeral namespace
      runAfter:
        - provision-cluster
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: namespace
          value: "$(params.namespace)"
      taskSpec:
        results:
          - name: bundle-image
            value: "$(steps.get-bundle-image.results.bundle-image)"
        params:
          - name: SNAPSHOT
          - name: namespace
            type: string
        volumes:
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-bundle-image
            image: registry.redhat.io/openshift4/ose-cli:latest
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
            results:
              - name: bundle-image
                type: string
                description: "bundle image from snapshot"
            script: |
              dnf -y install jq
              echo -n "$(jq -r --arg component_name "test-bundle" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")" > $(step.results.bundle-image.path)
    - name: ols-e2e-tests
      description: Task to run tests from service repository
      runAfter:
        - ols-install
      params:
        - name: bundleimage
          value: $(tasks.ols-install.results.bundle-image)
      taskSpec:
        volumes:
          - name: openai-token
            secret:
              secretName: openai
          - name: credentials
            emptyDir: {}
        params:
          - name: bundleimage
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: run-e2e-tests
            resources:
              requests:
                cpu: '1'
                memory: 1Gi
              limits:
                memory: 10Gi
            volumeMounts:
              - name: openai-token
                mountPath: /var/run/openai
              - name: credentials
                mountPath: /credentials
            env:
              - name: CYPRESS_KUBECONFIG_PATH
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: CYPRESS_LOGIN_IDP
                value: "kube:admin"
              - name: LLM_TOKEN_PATH
                value: "/var/run/openai/token"
              - name: CYPRESS_BUNDLE_IMAGE
                value: "$(params.bundleimage)"
              - name: PASSWORD_PATH
                value: "/credentials/$(steps.get-kubeconfig.results.passwordPath)"
              - name: CYPRESS_BASE_URL
                value: "$(steps.get-kubeconfig.results.consoleURL)"
            image: registry.fedoraproject.org/fedora:latest
            script: |
              echo "---------------------------------------------"
              echo "${CYPRESS_BASE_URL}"
              echo "---------------------------------------------"
              echo "$(cat ${CYPRESS_KUBECONFIG_PATH})"
              echo "---------------------------------------------"
              export CYPRESS_LOGIN_PASSWORD=$(cat ${PASSWORD_PATH})
              echo "${CYPRESS_LOGIN_PASSWORD}"
              echo "---------------------------------------------"
              dnf -y update && \
                  dnf -y install golang wget git
              echo "---------------------------------------------"
              dnf install -y xorg-x11-server-Xvfb
              curl -L -o oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux.tar.gz \
                  && tar -xvzf oc.tar.gz \
                  && chmod +x kubectl oc \
                  && mv oc kubectl /usr/local/bin/
              echo "---------------------------------------------"
              export OPERATOR_SDK_VERSION=1.36.1
              export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
              export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}
              curl -Lo /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_linux_${ARCH}
              chmod +x /usr/local/bin/operator-sdk
              operator-sdk version
              echo "---------------------------------------------"
              wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && \
                  yum install -y ./google-chrome-stable_current_*.rpm && \
                  rm ./google-chrome-stable_current_*.rpm && \
                  mkdir -p /go/src/github.com/openshift
              echo "---------------------------------------------"
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
              source ~/.bashrc
              nvm install v23.2.0
              echo "---------------------------------------------"
              git clone https://github.com/openshift/lightspeed-console.git
              cd lightspeed-console
              npm install
              npm -v
              echo "---------------------------------------------"
              echo "---------------------------------------------"
              npx cypress run