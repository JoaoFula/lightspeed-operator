---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  annotations:
    pipelinesascode.tekton.dev/task: "[ols-installer, ols-e2e-task]"
  name: ols-integration-tests-pipeline
spec:
  description: |
    This pipeline automates the process of running end-to-end tests for Openshift Lightspeed
    using a ROSA (Red Hat OpenShift Service on AWS) cluster. The pipeline provisions
    the ROSA cluster, installs the openshift lightspeed operator using the installer, runs the tests, collects artifacts,
    and finally deprovisions the ROSA cluster.
  params:
    - name: SNAPSHOT
      description: 'The JSON string representing the snapshot of the application under test.'
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - name: test-name
      description: 'The name of the test corresponding to a defined Konflux integration test.'
      default: 'ols-e2e-tests'
    - name: namespace
      description: 'Namespace to run tests in'
      default: 'lightspeed-tests'
  tasks:
    - name: eaas-provision-space
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - eaas-provision-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: get-supported-versions
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "$(steps.get-supported-versions.results.versions[0])."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: "m5.large"
    - name: ols-install
      description: Task to install bundle onto ephemeral namespace
      runAfter:
        - provision-cluster
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: namespace
          value: "$(params.namespace)"
      taskSpec:
        params:
          - name: SNAPSHOT
          - name: namespace
            type: string
        volumes:
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: install-operator
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
              - name: KONFLUX_COMPONENT_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.labels['appstudio.openshift.io/component']
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
            volumeMounts:
              - name: credentials
                mountPath: /credentials
            image: registry.redhat.io/openshift4/ose-cli:latest
            script: |
              echo "---------------------------------------------"
              cat $KUBECONFIG
              echo "---------------------------------------------"
              dnf -y install jq python3-pip
              export OPERATOR_SDK_VERSION=1.36.1
              export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
              export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}
              curl -Lo /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_linux_${ARCH}
              chmod +x /usr/local/bin/operator-sdk
              operator-sdk version
              echo "---------------------------------------------"
              oc new-project $(params.namespace)
              export IMAGE_DIGEST_MIRROR_SET=https://raw.githubusercontent.com/openshift/lightspeed-operator/main/config/manager/imagedigestmirrorset.yaml
              curl -Lo /usr/tmp/imagedigestmirrorset "$IMAGE_DIGEST_MIRROR_SET"
              oc apply -f /usr/tmp/imagedigestmirrorset
              echo "---------------------------------------------"
              echo ${KONFLUX_COMPONENT_NAME}
              export BUNDLE_IMAGE="$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")"
              echo "${BUNDLE_IMAGE}"
              echo "---------------------------------------------"
              operator-sdk run bundle --timeout=30m --namespace "$(params.namespace)" "$BUNDLE_IMAGE" --verbose
              echo "---------------------------------------------"
              echo -e "The install command will come here"
    - name: ols-e2e-tests
      description: Task to run tests from service repository
      runAfter:
        - ols-install
      taskSpec:
        volumes:
          - name: azure-openai-token
            secret:
              secretName: azureopenai-apitoken
          - name: azureopenai-entra-id
            secret:
              secretName: azureopenai-entra-id
          - name: bam-token
            secret:
              secretName: bam-apitoken
          - name: openai-token
            secret:
              secretName: openai
          - name: watsonx-token
            secret:
              secretName: watsonx-apitoken
          - name: insights-stage-upload-offline-token
            secret:
              secretName: insights-stage-upload-offline-token
        steps:
          - name: run-e2e-tests
            volumeMounts:
              - name: azure-openai-token
                mountPath: /var/run/azure_openai
              - name: azureopenai-entra-id
                mountPath: /var/run/azureopenai-entra-id
              - name: bam-token
                mountPath: /var/run/bam
              - name: openai-token
                mountPath: /var/run/openai
              - name: watsonx-token
                mountPath: /var/run/watsonx
              - name: insights-stage-upload-offline-token
                mountPath: /var/run/insights-stage-upload-offline-token
            env:
              - name: BAM_PROVIDER_KEY_PATH
                value: "/var/run/bam/token"
              - name: AZUREOPENAI_PROVIDER_KEY_PATH
                value: "/var/run/azure_openai/token"
              - name: AZUREOPENAI_ENTRA_ID_TENANT_ID
                value: $(cat /var/run/azureopenai-entra-id/tenant_id)
              - name: AZUREOPENAI_ENTRA_ID_CLIENT_ID
                value: $(cat /var/run/azureopenai-entra-id/client_id)
              - name: AZUREOPENAI_ENTRA_ID_CLIENT_SECRET
                value: $(cat /var/run/azureopenai-entra-id/client_secret)
              - name: OPENAI_PROVIDER_KEY_PATH
                value: "/var/run/openai/token"
              - name: WATSONX_PROVIDER_KEY_PATH
                value: "/var/run/watsonx/token"
              - name: PROVIDER_KEY_PATH
                value: "/var/run/openai/token"
              - name: PROVIDER
                value: "openai"
              - name: MODEL
                value: "gpt-3.5-turbo-1106"
              - name: CP_OFFLINE_TOKEN
                value: $(cat /var/run/insights-stage-upload-offline-token/token)
            image: registry.redhat.io/openshift4/ose-cli:latest
            script: |
              echo "---------------------------------------------"
              ls /var/run/azureopenai-entra-id